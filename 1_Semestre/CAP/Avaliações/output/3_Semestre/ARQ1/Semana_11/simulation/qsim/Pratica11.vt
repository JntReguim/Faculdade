// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/16/2024 00:41:50"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    top
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module top_vlg_sample_tst(
	clk,
	reset,
	sampler_tx
);
input  clk;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module top_vlg_check_tst (
	DataAdr,
	InstrOut,
	MemWrite,
	PcOut,
	WriteData,
	sampler_rx
);
input [31:0] DataAdr;
input [31:0] InstrOut;
input  MemWrite;
input [31:0] PcOut;
input [31:0] WriteData;
input sampler_rx;

reg [31:0] DataAdr_expected;
reg [31:0] InstrOut_expected;
reg  MemWrite_expected;
reg [31:0] PcOut_expected;
reg [31:0] WriteData_expected;

reg [31:0] DataAdr_prev;
reg [31:0] InstrOut_prev;
reg  MemWrite_prev;
reg [31:0] PcOut_prev;
reg [31:0] WriteData_prev;

reg [31:0] DataAdr_expected_prev;
reg [31:0] InstrOut_expected_prev;
reg  MemWrite_expected_prev;
reg [31:0] PcOut_expected_prev;
reg [31:0] WriteData_expected_prev;

reg [31:0] last_DataAdr_exp;
reg [31:0] last_InstrOut_exp;
reg  last_MemWrite_exp;
reg [31:0] last_PcOut_exp;
reg [31:0] last_WriteData_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	DataAdr_prev = DataAdr;
	InstrOut_prev = InstrOut;
	MemWrite_prev = MemWrite;
	PcOut_prev = PcOut;
	WriteData_prev = WriteData;
end

// update expected /o prevs

always @(trigger)
begin
	DataAdr_expected_prev = DataAdr_expected;
	InstrOut_expected_prev = InstrOut_expected;
	MemWrite_expected_prev = MemWrite_expected;
	PcOut_expected_prev = PcOut_expected;
	WriteData_expected_prev = WriteData_expected;
end


// expected DataAdr[ 31 ]
initial
begin
	DataAdr_expected[31] = 1'bX;
end 
// expected DataAdr[ 30 ]
initial
begin
	DataAdr_expected[30] = 1'bX;
end 
// expected DataAdr[ 29 ]
initial
begin
	DataAdr_expected[29] = 1'bX;
end 
// expected DataAdr[ 28 ]
initial
begin
	DataAdr_expected[28] = 1'bX;
end 
// expected DataAdr[ 27 ]
initial
begin
	DataAdr_expected[27] = 1'bX;
end 
// expected DataAdr[ 26 ]
initial
begin
	DataAdr_expected[26] = 1'bX;
end 
// expected DataAdr[ 25 ]
initial
begin
	DataAdr_expected[25] = 1'bX;
end 
// expected DataAdr[ 24 ]
initial
begin
	DataAdr_expected[24] = 1'bX;
end 
// expected DataAdr[ 23 ]
initial
begin
	DataAdr_expected[23] = 1'bX;
end 
// expected DataAdr[ 22 ]
initial
begin
	DataAdr_expected[22] = 1'bX;
end 
// expected DataAdr[ 21 ]
initial
begin
	DataAdr_expected[21] = 1'bX;
end 
// expected DataAdr[ 20 ]
initial
begin
	DataAdr_expected[20] = 1'bX;
end 
// expected DataAdr[ 19 ]
initial
begin
	DataAdr_expected[19] = 1'bX;
end 
// expected DataAdr[ 18 ]
initial
begin
	DataAdr_expected[18] = 1'bX;
end 
// expected DataAdr[ 17 ]
initial
begin
	DataAdr_expected[17] = 1'bX;
end 
// expected DataAdr[ 16 ]
initial
begin
	DataAdr_expected[16] = 1'bX;
end 
// expected DataAdr[ 15 ]
initial
begin
	DataAdr_expected[15] = 1'bX;
end 
// expected DataAdr[ 14 ]
initial
begin
	DataAdr_expected[14] = 1'bX;
end 
// expected DataAdr[ 13 ]
initial
begin
	DataAdr_expected[13] = 1'bX;
end 
// expected DataAdr[ 12 ]
initial
begin
	DataAdr_expected[12] = 1'bX;
end 
// expected DataAdr[ 11 ]
initial
begin
	DataAdr_expected[11] = 1'bX;
end 
// expected DataAdr[ 10 ]
initial
begin
	DataAdr_expected[10] = 1'bX;
end 
// expected DataAdr[ 9 ]
initial
begin
	DataAdr_expected[9] = 1'bX;
end 
// expected DataAdr[ 8 ]
initial
begin
	DataAdr_expected[8] = 1'bX;
end 
// expected DataAdr[ 7 ]
initial
begin
	DataAdr_expected[7] = 1'bX;
end 
// expected DataAdr[ 6 ]
initial
begin
	DataAdr_expected[6] = 1'bX;
end 
// expected DataAdr[ 5 ]
initial
begin
	DataAdr_expected[5] = 1'bX;
end 
// expected DataAdr[ 4 ]
initial
begin
	DataAdr_expected[4] = 1'bX;
end 
// expected DataAdr[ 3 ]
initial
begin
	DataAdr_expected[3] = 1'bX;
end 
// expected DataAdr[ 2 ]
initial
begin
	DataAdr_expected[2] = 1'bX;
end 
// expected DataAdr[ 1 ]
initial
begin
	DataAdr_expected[1] = 1'bX;
end 
// expected DataAdr[ 0 ]
initial
begin
	DataAdr_expected[0] = 1'bX;
end 

// expected MemWrite
initial
begin
	MemWrite_expected = 1'bX;
end 
// expected WriteData[ 31 ]
initial
begin
	WriteData_expected[31] = 1'bX;
end 
// expected WriteData[ 30 ]
initial
begin
	WriteData_expected[30] = 1'bX;
end 
// expected WriteData[ 29 ]
initial
begin
	WriteData_expected[29] = 1'bX;
end 
// expected WriteData[ 28 ]
initial
begin
	WriteData_expected[28] = 1'bX;
end 
// expected WriteData[ 27 ]
initial
begin
	WriteData_expected[27] = 1'bX;
end 
// expected WriteData[ 26 ]
initial
begin
	WriteData_expected[26] = 1'bX;
end 
// expected WriteData[ 25 ]
initial
begin
	WriteData_expected[25] = 1'bX;
end 
// expected WriteData[ 24 ]
initial
begin
	WriteData_expected[24] = 1'bX;
end 
// expected WriteData[ 23 ]
initial
begin
	WriteData_expected[23] = 1'bX;
end 
// expected WriteData[ 22 ]
initial
begin
	WriteData_expected[22] = 1'bX;
end 
// expected WriteData[ 21 ]
initial
begin
	WriteData_expected[21] = 1'bX;
end 
// expected WriteData[ 20 ]
initial
begin
	WriteData_expected[20] = 1'bX;
end 
// expected WriteData[ 19 ]
initial
begin
	WriteData_expected[19] = 1'bX;
end 
// expected WriteData[ 18 ]
initial
begin
	WriteData_expected[18] = 1'bX;
end 
// expected WriteData[ 17 ]
initial
begin
	WriteData_expected[17] = 1'bX;
end 
// expected WriteData[ 16 ]
initial
begin
	WriteData_expected[16] = 1'bX;
end 
// expected WriteData[ 15 ]
initial
begin
	WriteData_expected[15] = 1'bX;
end 
// expected WriteData[ 14 ]
initial
begin
	WriteData_expected[14] = 1'bX;
end 
// expected WriteData[ 13 ]
initial
begin
	WriteData_expected[13] = 1'bX;
end 
// expected WriteData[ 12 ]
initial
begin
	WriteData_expected[12] = 1'bX;
end 
// expected WriteData[ 11 ]
initial
begin
	WriteData_expected[11] = 1'bX;
end 
// expected WriteData[ 10 ]
initial
begin
	WriteData_expected[10] = 1'bX;
end 
// expected WriteData[ 9 ]
initial
begin
	WriteData_expected[9] = 1'bX;
end 
// expected WriteData[ 8 ]
initial
begin
	WriteData_expected[8] = 1'bX;
end 
// expected WriteData[ 7 ]
initial
begin
	WriteData_expected[7] = 1'bX;
end 
// expected WriteData[ 6 ]
initial
begin
	WriteData_expected[6] = 1'bX;
end 
// expected WriteData[ 5 ]
initial
begin
	WriteData_expected[5] = 1'bX;
end 
// expected WriteData[ 4 ]
initial
begin
	WriteData_expected[4] = 1'bX;
end 
// expected WriteData[ 3 ]
initial
begin
	WriteData_expected[3] = 1'bX;
end 
// expected WriteData[ 2 ]
initial
begin
	WriteData_expected[2] = 1'bX;
end 
// expected WriteData[ 1 ]
initial
begin
	WriteData_expected[1] = 1'bX;
end 
// expected WriteData[ 0 ]
initial
begin
	WriteData_expected[0] = 1'bX;
end 
// expected InstrOut[ 31 ]
initial
begin
	InstrOut_expected[31] = 1'bX;
end 
// expected InstrOut[ 30 ]
initial
begin
	InstrOut_expected[30] = 1'bX;
end 
// expected InstrOut[ 29 ]
initial
begin
	InstrOut_expected[29] = 1'bX;
end 
// expected InstrOut[ 28 ]
initial
begin
	InstrOut_expected[28] = 1'bX;
end 
// expected InstrOut[ 27 ]
initial
begin
	InstrOut_expected[27] = 1'bX;
end 
// expected InstrOut[ 26 ]
initial
begin
	InstrOut_expected[26] = 1'bX;
end 
// expected InstrOut[ 25 ]
initial
begin
	InstrOut_expected[25] = 1'bX;
end 
// expected InstrOut[ 24 ]
initial
begin
	InstrOut_expected[24] = 1'bX;
end 
// expected InstrOut[ 23 ]
initial
begin
	InstrOut_expected[23] = 1'bX;
end 
// expected InstrOut[ 22 ]
initial
begin
	InstrOut_expected[22] = 1'bX;
end 
// expected InstrOut[ 21 ]
initial
begin
	InstrOut_expected[21] = 1'bX;
end 
// expected InstrOut[ 20 ]
initial
begin
	InstrOut_expected[20] = 1'bX;
end 
// expected InstrOut[ 19 ]
initial
begin
	InstrOut_expected[19] = 1'bX;
end 
// expected InstrOut[ 18 ]
initial
begin
	InstrOut_expected[18] = 1'bX;
end 
// expected InstrOut[ 17 ]
initial
begin
	InstrOut_expected[17] = 1'bX;
end 
// expected InstrOut[ 16 ]
initial
begin
	InstrOut_expected[16] = 1'bX;
end 
// expected InstrOut[ 15 ]
initial
begin
	InstrOut_expected[15] = 1'bX;
end 
// expected InstrOut[ 14 ]
initial
begin
	InstrOut_expected[14] = 1'bX;
end 
// expected InstrOut[ 13 ]
initial
begin
	InstrOut_expected[13] = 1'bX;
end 
// expected InstrOut[ 12 ]
initial
begin
	InstrOut_expected[12] = 1'bX;
end 
// expected InstrOut[ 11 ]
initial
begin
	InstrOut_expected[11] = 1'bX;
end 
// expected InstrOut[ 10 ]
initial
begin
	InstrOut_expected[10] = 1'bX;
end 
// expected InstrOut[ 9 ]
initial
begin
	InstrOut_expected[9] = 1'bX;
end 
// expected InstrOut[ 8 ]
initial
begin
	InstrOut_expected[8] = 1'bX;
end 
// expected InstrOut[ 7 ]
initial
begin
	InstrOut_expected[7] = 1'bX;
end 
// expected InstrOut[ 6 ]
initial
begin
	InstrOut_expected[6] = 1'bX;
end 
// expected InstrOut[ 5 ]
initial
begin
	InstrOut_expected[5] = 1'bX;
end 
// expected InstrOut[ 4 ]
initial
begin
	InstrOut_expected[4] = 1'bX;
end 
// expected InstrOut[ 3 ]
initial
begin
	InstrOut_expected[3] = 1'bX;
end 
// expected InstrOut[ 2 ]
initial
begin
	InstrOut_expected[2] = 1'bX;
end 
// expected InstrOut[ 1 ]
initial
begin
	InstrOut_expected[1] = 1'bX;
end 
// expected InstrOut[ 0 ]
initial
begin
	InstrOut_expected[0] = 1'bX;
end 
// expected PcOut[ 31 ]
initial
begin
	PcOut_expected[31] = 1'bX;
end 
// expected PcOut[ 30 ]
initial
begin
	PcOut_expected[30] = 1'bX;
end 
// expected PcOut[ 29 ]
initial
begin
	PcOut_expected[29] = 1'bX;
end 
// expected PcOut[ 28 ]
initial
begin
	PcOut_expected[28] = 1'bX;
end 
// expected PcOut[ 27 ]
initial
begin
	PcOut_expected[27] = 1'bX;
end 
// expected PcOut[ 26 ]
initial
begin
	PcOut_expected[26] = 1'bX;
end 
// expected PcOut[ 25 ]
initial
begin
	PcOut_expected[25] = 1'bX;
end 
// expected PcOut[ 24 ]
initial
begin
	PcOut_expected[24] = 1'bX;
end 
// expected PcOut[ 23 ]
initial
begin
	PcOut_expected[23] = 1'bX;
end 
// expected PcOut[ 22 ]
initial
begin
	PcOut_expected[22] = 1'bX;
end 
// expected PcOut[ 21 ]
initial
begin
	PcOut_expected[21] = 1'bX;
end 
// expected PcOut[ 20 ]
initial
begin
	PcOut_expected[20] = 1'bX;
end 
// expected PcOut[ 19 ]
initial
begin
	PcOut_expected[19] = 1'bX;
end 
// expected PcOut[ 18 ]
initial
begin
	PcOut_expected[18] = 1'bX;
end 
// expected PcOut[ 17 ]
initial
begin
	PcOut_expected[17] = 1'bX;
end 
// expected PcOut[ 16 ]
initial
begin
	PcOut_expected[16] = 1'bX;
end 
// expected PcOut[ 15 ]
initial
begin
	PcOut_expected[15] = 1'bX;
end 
// expected PcOut[ 14 ]
initial
begin
	PcOut_expected[14] = 1'bX;
end 
// expected PcOut[ 13 ]
initial
begin
	PcOut_expected[13] = 1'bX;
end 
// expected PcOut[ 12 ]
initial
begin
	PcOut_expected[12] = 1'bX;
end 
// expected PcOut[ 11 ]
initial
begin
	PcOut_expected[11] = 1'bX;
end 
// expected PcOut[ 10 ]
initial
begin
	PcOut_expected[10] = 1'bX;
end 
// expected PcOut[ 9 ]
initial
begin
	PcOut_expected[9] = 1'bX;
end 
// expected PcOut[ 8 ]
initial
begin
	PcOut_expected[8] = 1'bX;
end 
// expected PcOut[ 7 ]
initial
begin
	PcOut_expected[7] = 1'bX;
end 
// expected PcOut[ 6 ]
initial
begin
	PcOut_expected[6] = 1'bX;
end 
// expected PcOut[ 5 ]
initial
begin
	PcOut_expected[5] = 1'bX;
end 
// expected PcOut[ 4 ]
initial
begin
	PcOut_expected[4] = 1'bX;
end 
// expected PcOut[ 3 ]
initial
begin
	PcOut_expected[3] = 1'bX;
end 
// expected PcOut[ 2 ]
initial
begin
	PcOut_expected[2] = 1'bX;
end 
// expected PcOut[ 1 ]
initial
begin
	PcOut_expected[1] = 1'bX;
end 
// expected PcOut[ 0 ]
initial
begin
	PcOut_expected[0] = 1'bX;
end 
// generate trigger
always @(DataAdr_expected or DataAdr or InstrOut_expected or InstrOut or MemWrite_expected or MemWrite or PcOut_expected or PcOut or WriteData_expected or WriteData)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DataAdr = %b | expected InstrOut = %b | expected MemWrite = %b | expected PcOut = %b | expected WriteData = %b | ",DataAdr_expected_prev,InstrOut_expected_prev,MemWrite_expected_prev,PcOut_expected_prev,WriteData_expected_prev);
	$display("| real DataAdr = %b | real InstrOut = %b | real MemWrite = %b | real PcOut = %b | real WriteData = %b | ",DataAdr_prev,InstrOut_prev,MemWrite_prev,PcOut_prev,WriteData_prev);
`endif
	if (
		( DataAdr_expected_prev[0] !== 1'bx ) && ( DataAdr_prev[0] !== DataAdr_expected_prev[0] )
		&& ((DataAdr_expected_prev[0] !== last_DataAdr_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataAdr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataAdr_expected_prev);
		$display ("     Real value = %b", DataAdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataAdr_exp[0] = DataAdr_expected_prev[0];
	end
	if (
		( DataAdr_expected_prev[1] !== 1'bx ) && ( DataAdr_prev[1] !== DataAdr_expected_prev[1] )
		&& ((DataAdr_expected_prev[1] !== last_DataAdr_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataAdr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataAdr_expected_prev);
		$display ("     Real value = %b", DataAdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataAdr_exp[1] = DataAdr_expected_prev[1];
	end
	if (
		( DataAdr_expected_prev[2] !== 1'bx ) && ( DataAdr_prev[2] !== DataAdr_expected_prev[2] )
		&& ((DataAdr_expected_prev[2] !== last_DataAdr_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataAdr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataAdr_expected_prev);
		$display ("     Real value = %b", DataAdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataAdr_exp[2] = DataAdr_expected_prev[2];
	end
	if (
		( DataAdr_expected_prev[3] !== 1'bx ) && ( DataAdr_prev[3] !== DataAdr_expected_prev[3] )
		&& ((DataAdr_expected_prev[3] !== last_DataAdr_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataAdr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataAdr_expected_prev);
		$display ("     Real value = %b", DataAdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataAdr_exp[3] = DataAdr_expected_prev[3];
	end
	if (
		( DataAdr_expected_prev[4] !== 1'bx ) && ( DataAdr_prev[4] !== DataAdr_expected_prev[4] )
		&& ((DataAdr_expected_prev[4] !== last_DataAdr_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataAdr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataAdr_expected_prev);
		$display ("     Real value = %b", DataAdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataAdr_exp[4] = DataAdr_expected_prev[4];
	end
	if (
		( DataAdr_expected_prev[5] !== 1'bx ) && ( DataAdr_prev[5] !== DataAdr_expected_prev[5] )
		&& ((DataAdr_expected_prev[5] !== last_DataAdr_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataAdr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataAdr_expected_prev);
		$display ("     Real value = %b", DataAdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataAdr_exp[5] = DataAdr_expected_prev[5];
	end
	if (
		( DataAdr_expected_prev[6] !== 1'bx ) && ( DataAdr_prev[6] !== DataAdr_expected_prev[6] )
		&& ((DataAdr_expected_prev[6] !== last_DataAdr_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataAdr[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataAdr_expected_prev);
		$display ("     Real value = %b", DataAdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataAdr_exp[6] = DataAdr_expected_prev[6];
	end
	if (
		( DataAdr_expected_prev[7] !== 1'bx ) && ( DataAdr_prev[7] !== DataAdr_expected_prev[7] )
		&& ((DataAdr_expected_prev[7] !== last_DataAdr_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataAdr[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataAdr_expected_prev);
		$display ("     Real value = %b", DataAdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataAdr_exp[7] = DataAdr_expected_prev[7];
	end
	if (
		( DataAdr_expected_prev[8] !== 1'bx ) && ( DataAdr_prev[8] !== DataAdr_expected_prev[8] )
		&& ((DataAdr_expected_prev[8] !== last_DataAdr_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataAdr[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataAdr_expected_prev);
		$display ("     Real value = %b", DataAdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataAdr_exp[8] = DataAdr_expected_prev[8];
	end
	if (
		( DataAdr_expected_prev[9] !== 1'bx ) && ( DataAdr_prev[9] !== DataAdr_expected_prev[9] )
		&& ((DataAdr_expected_prev[9] !== last_DataAdr_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataAdr[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataAdr_expected_prev);
		$display ("     Real value = %b", DataAdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataAdr_exp[9] = DataAdr_expected_prev[9];
	end
	if (
		( DataAdr_expected_prev[10] !== 1'bx ) && ( DataAdr_prev[10] !== DataAdr_expected_prev[10] )
		&& ((DataAdr_expected_prev[10] !== last_DataAdr_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataAdr[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataAdr_expected_prev);
		$display ("     Real value = %b", DataAdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataAdr_exp[10] = DataAdr_expected_prev[10];
	end
	if (
		( DataAdr_expected_prev[11] !== 1'bx ) && ( DataAdr_prev[11] !== DataAdr_expected_prev[11] )
		&& ((DataAdr_expected_prev[11] !== last_DataAdr_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataAdr[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataAdr_expected_prev);
		$display ("     Real value = %b", DataAdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataAdr_exp[11] = DataAdr_expected_prev[11];
	end
	if (
		( DataAdr_expected_prev[12] !== 1'bx ) && ( DataAdr_prev[12] !== DataAdr_expected_prev[12] )
		&& ((DataAdr_expected_prev[12] !== last_DataAdr_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataAdr[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataAdr_expected_prev);
		$display ("     Real value = %b", DataAdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataAdr_exp[12] = DataAdr_expected_prev[12];
	end
	if (
		( DataAdr_expected_prev[13] !== 1'bx ) && ( DataAdr_prev[13] !== DataAdr_expected_prev[13] )
		&& ((DataAdr_expected_prev[13] !== last_DataAdr_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataAdr[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataAdr_expected_prev);
		$display ("     Real value = %b", DataAdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataAdr_exp[13] = DataAdr_expected_prev[13];
	end
	if (
		( DataAdr_expected_prev[14] !== 1'bx ) && ( DataAdr_prev[14] !== DataAdr_expected_prev[14] )
		&& ((DataAdr_expected_prev[14] !== last_DataAdr_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataAdr[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataAdr_expected_prev);
		$display ("     Real value = %b", DataAdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataAdr_exp[14] = DataAdr_expected_prev[14];
	end
	if (
		( DataAdr_expected_prev[15] !== 1'bx ) && ( DataAdr_prev[15] !== DataAdr_expected_prev[15] )
		&& ((DataAdr_expected_prev[15] !== last_DataAdr_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataAdr[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataAdr_expected_prev);
		$display ("     Real value = %b", DataAdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataAdr_exp[15] = DataAdr_expected_prev[15];
	end
	if (
		( DataAdr_expected_prev[16] !== 1'bx ) && ( DataAdr_prev[16] !== DataAdr_expected_prev[16] )
		&& ((DataAdr_expected_prev[16] !== last_DataAdr_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataAdr[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataAdr_expected_prev);
		$display ("     Real value = %b", DataAdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataAdr_exp[16] = DataAdr_expected_prev[16];
	end
	if (
		( DataAdr_expected_prev[17] !== 1'bx ) && ( DataAdr_prev[17] !== DataAdr_expected_prev[17] )
		&& ((DataAdr_expected_prev[17] !== last_DataAdr_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataAdr[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataAdr_expected_prev);
		$display ("     Real value = %b", DataAdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataAdr_exp[17] = DataAdr_expected_prev[17];
	end
	if (
		( DataAdr_expected_prev[18] !== 1'bx ) && ( DataAdr_prev[18] !== DataAdr_expected_prev[18] )
		&& ((DataAdr_expected_prev[18] !== last_DataAdr_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataAdr[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataAdr_expected_prev);
		$display ("     Real value = %b", DataAdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataAdr_exp[18] = DataAdr_expected_prev[18];
	end
	if (
		( DataAdr_expected_prev[19] !== 1'bx ) && ( DataAdr_prev[19] !== DataAdr_expected_prev[19] )
		&& ((DataAdr_expected_prev[19] !== last_DataAdr_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataAdr[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataAdr_expected_prev);
		$display ("     Real value = %b", DataAdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataAdr_exp[19] = DataAdr_expected_prev[19];
	end
	if (
		( DataAdr_expected_prev[20] !== 1'bx ) && ( DataAdr_prev[20] !== DataAdr_expected_prev[20] )
		&& ((DataAdr_expected_prev[20] !== last_DataAdr_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataAdr[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataAdr_expected_prev);
		$display ("     Real value = %b", DataAdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataAdr_exp[20] = DataAdr_expected_prev[20];
	end
	if (
		( DataAdr_expected_prev[21] !== 1'bx ) && ( DataAdr_prev[21] !== DataAdr_expected_prev[21] )
		&& ((DataAdr_expected_prev[21] !== last_DataAdr_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataAdr[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataAdr_expected_prev);
		$display ("     Real value = %b", DataAdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataAdr_exp[21] = DataAdr_expected_prev[21];
	end
	if (
		( DataAdr_expected_prev[22] !== 1'bx ) && ( DataAdr_prev[22] !== DataAdr_expected_prev[22] )
		&& ((DataAdr_expected_prev[22] !== last_DataAdr_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataAdr[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataAdr_expected_prev);
		$display ("     Real value = %b", DataAdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataAdr_exp[22] = DataAdr_expected_prev[22];
	end
	if (
		( DataAdr_expected_prev[23] !== 1'bx ) && ( DataAdr_prev[23] !== DataAdr_expected_prev[23] )
		&& ((DataAdr_expected_prev[23] !== last_DataAdr_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataAdr[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataAdr_expected_prev);
		$display ("     Real value = %b", DataAdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataAdr_exp[23] = DataAdr_expected_prev[23];
	end
	if (
		( DataAdr_expected_prev[24] !== 1'bx ) && ( DataAdr_prev[24] !== DataAdr_expected_prev[24] )
		&& ((DataAdr_expected_prev[24] !== last_DataAdr_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataAdr[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataAdr_expected_prev);
		$display ("     Real value = %b", DataAdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataAdr_exp[24] = DataAdr_expected_prev[24];
	end
	if (
		( DataAdr_expected_prev[25] !== 1'bx ) && ( DataAdr_prev[25] !== DataAdr_expected_prev[25] )
		&& ((DataAdr_expected_prev[25] !== last_DataAdr_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataAdr[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataAdr_expected_prev);
		$display ("     Real value = %b", DataAdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataAdr_exp[25] = DataAdr_expected_prev[25];
	end
	if (
		( DataAdr_expected_prev[26] !== 1'bx ) && ( DataAdr_prev[26] !== DataAdr_expected_prev[26] )
		&& ((DataAdr_expected_prev[26] !== last_DataAdr_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataAdr[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataAdr_expected_prev);
		$display ("     Real value = %b", DataAdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataAdr_exp[26] = DataAdr_expected_prev[26];
	end
	if (
		( DataAdr_expected_prev[27] !== 1'bx ) && ( DataAdr_prev[27] !== DataAdr_expected_prev[27] )
		&& ((DataAdr_expected_prev[27] !== last_DataAdr_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataAdr[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataAdr_expected_prev);
		$display ("     Real value = %b", DataAdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataAdr_exp[27] = DataAdr_expected_prev[27];
	end
	if (
		( DataAdr_expected_prev[28] !== 1'bx ) && ( DataAdr_prev[28] !== DataAdr_expected_prev[28] )
		&& ((DataAdr_expected_prev[28] !== last_DataAdr_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataAdr[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataAdr_expected_prev);
		$display ("     Real value = %b", DataAdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataAdr_exp[28] = DataAdr_expected_prev[28];
	end
	if (
		( DataAdr_expected_prev[29] !== 1'bx ) && ( DataAdr_prev[29] !== DataAdr_expected_prev[29] )
		&& ((DataAdr_expected_prev[29] !== last_DataAdr_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataAdr[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataAdr_expected_prev);
		$display ("     Real value = %b", DataAdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataAdr_exp[29] = DataAdr_expected_prev[29];
	end
	if (
		( DataAdr_expected_prev[30] !== 1'bx ) && ( DataAdr_prev[30] !== DataAdr_expected_prev[30] )
		&& ((DataAdr_expected_prev[30] !== last_DataAdr_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataAdr[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataAdr_expected_prev);
		$display ("     Real value = %b", DataAdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataAdr_exp[30] = DataAdr_expected_prev[30];
	end
	if (
		( DataAdr_expected_prev[31] !== 1'bx ) && ( DataAdr_prev[31] !== DataAdr_expected_prev[31] )
		&& ((DataAdr_expected_prev[31] !== last_DataAdr_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DataAdr[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DataAdr_expected_prev);
		$display ("     Real value = %b", DataAdr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DataAdr_exp[31] = DataAdr_expected_prev[31];
	end
	if (
		( InstrOut_expected_prev[0] !== 1'bx ) && ( InstrOut_prev[0] !== InstrOut_expected_prev[0] )
		&& ((InstrOut_expected_prev[0] !== last_InstrOut_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstrOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstrOut_expected_prev);
		$display ("     Real value = %b", InstrOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InstrOut_exp[0] = InstrOut_expected_prev[0];
	end
	if (
		( InstrOut_expected_prev[1] !== 1'bx ) && ( InstrOut_prev[1] !== InstrOut_expected_prev[1] )
		&& ((InstrOut_expected_prev[1] !== last_InstrOut_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstrOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstrOut_expected_prev);
		$display ("     Real value = %b", InstrOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InstrOut_exp[1] = InstrOut_expected_prev[1];
	end
	if (
		( InstrOut_expected_prev[2] !== 1'bx ) && ( InstrOut_prev[2] !== InstrOut_expected_prev[2] )
		&& ((InstrOut_expected_prev[2] !== last_InstrOut_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstrOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstrOut_expected_prev);
		$display ("     Real value = %b", InstrOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InstrOut_exp[2] = InstrOut_expected_prev[2];
	end
	if (
		( InstrOut_expected_prev[3] !== 1'bx ) && ( InstrOut_prev[3] !== InstrOut_expected_prev[3] )
		&& ((InstrOut_expected_prev[3] !== last_InstrOut_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstrOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstrOut_expected_prev);
		$display ("     Real value = %b", InstrOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InstrOut_exp[3] = InstrOut_expected_prev[3];
	end
	if (
		( InstrOut_expected_prev[4] !== 1'bx ) && ( InstrOut_prev[4] !== InstrOut_expected_prev[4] )
		&& ((InstrOut_expected_prev[4] !== last_InstrOut_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstrOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstrOut_expected_prev);
		$display ("     Real value = %b", InstrOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InstrOut_exp[4] = InstrOut_expected_prev[4];
	end
	if (
		( InstrOut_expected_prev[5] !== 1'bx ) && ( InstrOut_prev[5] !== InstrOut_expected_prev[5] )
		&& ((InstrOut_expected_prev[5] !== last_InstrOut_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstrOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstrOut_expected_prev);
		$display ("     Real value = %b", InstrOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InstrOut_exp[5] = InstrOut_expected_prev[5];
	end
	if (
		( InstrOut_expected_prev[6] !== 1'bx ) && ( InstrOut_prev[6] !== InstrOut_expected_prev[6] )
		&& ((InstrOut_expected_prev[6] !== last_InstrOut_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstrOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstrOut_expected_prev);
		$display ("     Real value = %b", InstrOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InstrOut_exp[6] = InstrOut_expected_prev[6];
	end
	if (
		( InstrOut_expected_prev[7] !== 1'bx ) && ( InstrOut_prev[7] !== InstrOut_expected_prev[7] )
		&& ((InstrOut_expected_prev[7] !== last_InstrOut_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstrOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstrOut_expected_prev);
		$display ("     Real value = %b", InstrOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InstrOut_exp[7] = InstrOut_expected_prev[7];
	end
	if (
		( InstrOut_expected_prev[8] !== 1'bx ) && ( InstrOut_prev[8] !== InstrOut_expected_prev[8] )
		&& ((InstrOut_expected_prev[8] !== last_InstrOut_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstrOut[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstrOut_expected_prev);
		$display ("     Real value = %b", InstrOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InstrOut_exp[8] = InstrOut_expected_prev[8];
	end
	if (
		( InstrOut_expected_prev[9] !== 1'bx ) && ( InstrOut_prev[9] !== InstrOut_expected_prev[9] )
		&& ((InstrOut_expected_prev[9] !== last_InstrOut_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstrOut[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstrOut_expected_prev);
		$display ("     Real value = %b", InstrOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InstrOut_exp[9] = InstrOut_expected_prev[9];
	end
	if (
		( InstrOut_expected_prev[10] !== 1'bx ) && ( InstrOut_prev[10] !== InstrOut_expected_prev[10] )
		&& ((InstrOut_expected_prev[10] !== last_InstrOut_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstrOut[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstrOut_expected_prev);
		$display ("     Real value = %b", InstrOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InstrOut_exp[10] = InstrOut_expected_prev[10];
	end
	if (
		( InstrOut_expected_prev[11] !== 1'bx ) && ( InstrOut_prev[11] !== InstrOut_expected_prev[11] )
		&& ((InstrOut_expected_prev[11] !== last_InstrOut_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstrOut[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstrOut_expected_prev);
		$display ("     Real value = %b", InstrOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InstrOut_exp[11] = InstrOut_expected_prev[11];
	end
	if (
		( InstrOut_expected_prev[12] !== 1'bx ) && ( InstrOut_prev[12] !== InstrOut_expected_prev[12] )
		&& ((InstrOut_expected_prev[12] !== last_InstrOut_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstrOut[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstrOut_expected_prev);
		$display ("     Real value = %b", InstrOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InstrOut_exp[12] = InstrOut_expected_prev[12];
	end
	if (
		( InstrOut_expected_prev[13] !== 1'bx ) && ( InstrOut_prev[13] !== InstrOut_expected_prev[13] )
		&& ((InstrOut_expected_prev[13] !== last_InstrOut_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstrOut[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstrOut_expected_prev);
		$display ("     Real value = %b", InstrOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InstrOut_exp[13] = InstrOut_expected_prev[13];
	end
	if (
		( InstrOut_expected_prev[14] !== 1'bx ) && ( InstrOut_prev[14] !== InstrOut_expected_prev[14] )
		&& ((InstrOut_expected_prev[14] !== last_InstrOut_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstrOut[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstrOut_expected_prev);
		$display ("     Real value = %b", InstrOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InstrOut_exp[14] = InstrOut_expected_prev[14];
	end
	if (
		( InstrOut_expected_prev[15] !== 1'bx ) && ( InstrOut_prev[15] !== InstrOut_expected_prev[15] )
		&& ((InstrOut_expected_prev[15] !== last_InstrOut_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstrOut[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstrOut_expected_prev);
		$display ("     Real value = %b", InstrOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InstrOut_exp[15] = InstrOut_expected_prev[15];
	end
	if (
		( InstrOut_expected_prev[16] !== 1'bx ) && ( InstrOut_prev[16] !== InstrOut_expected_prev[16] )
		&& ((InstrOut_expected_prev[16] !== last_InstrOut_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstrOut[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstrOut_expected_prev);
		$display ("     Real value = %b", InstrOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InstrOut_exp[16] = InstrOut_expected_prev[16];
	end
	if (
		( InstrOut_expected_prev[17] !== 1'bx ) && ( InstrOut_prev[17] !== InstrOut_expected_prev[17] )
		&& ((InstrOut_expected_prev[17] !== last_InstrOut_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstrOut[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstrOut_expected_prev);
		$display ("     Real value = %b", InstrOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InstrOut_exp[17] = InstrOut_expected_prev[17];
	end
	if (
		( InstrOut_expected_prev[18] !== 1'bx ) && ( InstrOut_prev[18] !== InstrOut_expected_prev[18] )
		&& ((InstrOut_expected_prev[18] !== last_InstrOut_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstrOut[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstrOut_expected_prev);
		$display ("     Real value = %b", InstrOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InstrOut_exp[18] = InstrOut_expected_prev[18];
	end
	if (
		( InstrOut_expected_prev[19] !== 1'bx ) && ( InstrOut_prev[19] !== InstrOut_expected_prev[19] )
		&& ((InstrOut_expected_prev[19] !== last_InstrOut_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstrOut[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstrOut_expected_prev);
		$display ("     Real value = %b", InstrOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InstrOut_exp[19] = InstrOut_expected_prev[19];
	end
	if (
		( InstrOut_expected_prev[20] !== 1'bx ) && ( InstrOut_prev[20] !== InstrOut_expected_prev[20] )
		&& ((InstrOut_expected_prev[20] !== last_InstrOut_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstrOut[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstrOut_expected_prev);
		$display ("     Real value = %b", InstrOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InstrOut_exp[20] = InstrOut_expected_prev[20];
	end
	if (
		( InstrOut_expected_prev[21] !== 1'bx ) && ( InstrOut_prev[21] !== InstrOut_expected_prev[21] )
		&& ((InstrOut_expected_prev[21] !== last_InstrOut_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstrOut[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstrOut_expected_prev);
		$display ("     Real value = %b", InstrOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InstrOut_exp[21] = InstrOut_expected_prev[21];
	end
	if (
		( InstrOut_expected_prev[22] !== 1'bx ) && ( InstrOut_prev[22] !== InstrOut_expected_prev[22] )
		&& ((InstrOut_expected_prev[22] !== last_InstrOut_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstrOut[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstrOut_expected_prev);
		$display ("     Real value = %b", InstrOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InstrOut_exp[22] = InstrOut_expected_prev[22];
	end
	if (
		( InstrOut_expected_prev[23] !== 1'bx ) && ( InstrOut_prev[23] !== InstrOut_expected_prev[23] )
		&& ((InstrOut_expected_prev[23] !== last_InstrOut_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstrOut[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstrOut_expected_prev);
		$display ("     Real value = %b", InstrOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InstrOut_exp[23] = InstrOut_expected_prev[23];
	end
	if (
		( InstrOut_expected_prev[24] !== 1'bx ) && ( InstrOut_prev[24] !== InstrOut_expected_prev[24] )
		&& ((InstrOut_expected_prev[24] !== last_InstrOut_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstrOut[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstrOut_expected_prev);
		$display ("     Real value = %b", InstrOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InstrOut_exp[24] = InstrOut_expected_prev[24];
	end
	if (
		( InstrOut_expected_prev[25] !== 1'bx ) && ( InstrOut_prev[25] !== InstrOut_expected_prev[25] )
		&& ((InstrOut_expected_prev[25] !== last_InstrOut_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstrOut[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstrOut_expected_prev);
		$display ("     Real value = %b", InstrOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InstrOut_exp[25] = InstrOut_expected_prev[25];
	end
	if (
		( InstrOut_expected_prev[26] !== 1'bx ) && ( InstrOut_prev[26] !== InstrOut_expected_prev[26] )
		&& ((InstrOut_expected_prev[26] !== last_InstrOut_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstrOut[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstrOut_expected_prev);
		$display ("     Real value = %b", InstrOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InstrOut_exp[26] = InstrOut_expected_prev[26];
	end
	if (
		( InstrOut_expected_prev[27] !== 1'bx ) && ( InstrOut_prev[27] !== InstrOut_expected_prev[27] )
		&& ((InstrOut_expected_prev[27] !== last_InstrOut_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstrOut[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstrOut_expected_prev);
		$display ("     Real value = %b", InstrOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InstrOut_exp[27] = InstrOut_expected_prev[27];
	end
	if (
		( InstrOut_expected_prev[28] !== 1'bx ) && ( InstrOut_prev[28] !== InstrOut_expected_prev[28] )
		&& ((InstrOut_expected_prev[28] !== last_InstrOut_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstrOut[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstrOut_expected_prev);
		$display ("     Real value = %b", InstrOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InstrOut_exp[28] = InstrOut_expected_prev[28];
	end
	if (
		( InstrOut_expected_prev[29] !== 1'bx ) && ( InstrOut_prev[29] !== InstrOut_expected_prev[29] )
		&& ((InstrOut_expected_prev[29] !== last_InstrOut_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstrOut[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstrOut_expected_prev);
		$display ("     Real value = %b", InstrOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InstrOut_exp[29] = InstrOut_expected_prev[29];
	end
	if (
		( InstrOut_expected_prev[30] !== 1'bx ) && ( InstrOut_prev[30] !== InstrOut_expected_prev[30] )
		&& ((InstrOut_expected_prev[30] !== last_InstrOut_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstrOut[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstrOut_expected_prev);
		$display ("     Real value = %b", InstrOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InstrOut_exp[30] = InstrOut_expected_prev[30];
	end
	if (
		( InstrOut_expected_prev[31] !== 1'bx ) && ( InstrOut_prev[31] !== InstrOut_expected_prev[31] )
		&& ((InstrOut_expected_prev[31] !== last_InstrOut_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port InstrOut[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", InstrOut_expected_prev);
		$display ("     Real value = %b", InstrOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_InstrOut_exp[31] = InstrOut_expected_prev[31];
	end
	if (
		( MemWrite_expected_prev !== 1'bx ) && ( MemWrite_prev !== MemWrite_expected_prev )
		&& ((MemWrite_expected_prev !== last_MemWrite_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemWrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemWrite_expected_prev);
		$display ("     Real value = %b", MemWrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MemWrite_exp = MemWrite_expected_prev;
	end
	if (
		( PcOut_expected_prev[0] !== 1'bx ) && ( PcOut_prev[0] !== PcOut_expected_prev[0] )
		&& ((PcOut_expected_prev[0] !== last_PcOut_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PcOut_exp[0] = PcOut_expected_prev[0];
	end
	if (
		( PcOut_expected_prev[1] !== 1'bx ) && ( PcOut_prev[1] !== PcOut_expected_prev[1] )
		&& ((PcOut_expected_prev[1] !== last_PcOut_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PcOut_exp[1] = PcOut_expected_prev[1];
	end
	if (
		( PcOut_expected_prev[2] !== 1'bx ) && ( PcOut_prev[2] !== PcOut_expected_prev[2] )
		&& ((PcOut_expected_prev[2] !== last_PcOut_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PcOut_exp[2] = PcOut_expected_prev[2];
	end
	if (
		( PcOut_expected_prev[3] !== 1'bx ) && ( PcOut_prev[3] !== PcOut_expected_prev[3] )
		&& ((PcOut_expected_prev[3] !== last_PcOut_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PcOut_exp[3] = PcOut_expected_prev[3];
	end
	if (
		( PcOut_expected_prev[4] !== 1'bx ) && ( PcOut_prev[4] !== PcOut_expected_prev[4] )
		&& ((PcOut_expected_prev[4] !== last_PcOut_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PcOut_exp[4] = PcOut_expected_prev[4];
	end
	if (
		( PcOut_expected_prev[5] !== 1'bx ) && ( PcOut_prev[5] !== PcOut_expected_prev[5] )
		&& ((PcOut_expected_prev[5] !== last_PcOut_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PcOut_exp[5] = PcOut_expected_prev[5];
	end
	if (
		( PcOut_expected_prev[6] !== 1'bx ) && ( PcOut_prev[6] !== PcOut_expected_prev[6] )
		&& ((PcOut_expected_prev[6] !== last_PcOut_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PcOut_exp[6] = PcOut_expected_prev[6];
	end
	if (
		( PcOut_expected_prev[7] !== 1'bx ) && ( PcOut_prev[7] !== PcOut_expected_prev[7] )
		&& ((PcOut_expected_prev[7] !== last_PcOut_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PcOut_exp[7] = PcOut_expected_prev[7];
	end
	if (
		( PcOut_expected_prev[8] !== 1'bx ) && ( PcOut_prev[8] !== PcOut_expected_prev[8] )
		&& ((PcOut_expected_prev[8] !== last_PcOut_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PcOut_exp[8] = PcOut_expected_prev[8];
	end
	if (
		( PcOut_expected_prev[9] !== 1'bx ) && ( PcOut_prev[9] !== PcOut_expected_prev[9] )
		&& ((PcOut_expected_prev[9] !== last_PcOut_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PcOut_exp[9] = PcOut_expected_prev[9];
	end
	if (
		( PcOut_expected_prev[10] !== 1'bx ) && ( PcOut_prev[10] !== PcOut_expected_prev[10] )
		&& ((PcOut_expected_prev[10] !== last_PcOut_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PcOut_exp[10] = PcOut_expected_prev[10];
	end
	if (
		( PcOut_expected_prev[11] !== 1'bx ) && ( PcOut_prev[11] !== PcOut_expected_prev[11] )
		&& ((PcOut_expected_prev[11] !== last_PcOut_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PcOut_exp[11] = PcOut_expected_prev[11];
	end
	if (
		( PcOut_expected_prev[12] !== 1'bx ) && ( PcOut_prev[12] !== PcOut_expected_prev[12] )
		&& ((PcOut_expected_prev[12] !== last_PcOut_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PcOut_exp[12] = PcOut_expected_prev[12];
	end
	if (
		( PcOut_expected_prev[13] !== 1'bx ) && ( PcOut_prev[13] !== PcOut_expected_prev[13] )
		&& ((PcOut_expected_prev[13] !== last_PcOut_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PcOut_exp[13] = PcOut_expected_prev[13];
	end
	if (
		( PcOut_expected_prev[14] !== 1'bx ) && ( PcOut_prev[14] !== PcOut_expected_prev[14] )
		&& ((PcOut_expected_prev[14] !== last_PcOut_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PcOut_exp[14] = PcOut_expected_prev[14];
	end
	if (
		( PcOut_expected_prev[15] !== 1'bx ) && ( PcOut_prev[15] !== PcOut_expected_prev[15] )
		&& ((PcOut_expected_prev[15] !== last_PcOut_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PcOut_exp[15] = PcOut_expected_prev[15];
	end
	if (
		( PcOut_expected_prev[16] !== 1'bx ) && ( PcOut_prev[16] !== PcOut_expected_prev[16] )
		&& ((PcOut_expected_prev[16] !== last_PcOut_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PcOut_exp[16] = PcOut_expected_prev[16];
	end
	if (
		( PcOut_expected_prev[17] !== 1'bx ) && ( PcOut_prev[17] !== PcOut_expected_prev[17] )
		&& ((PcOut_expected_prev[17] !== last_PcOut_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PcOut_exp[17] = PcOut_expected_prev[17];
	end
	if (
		( PcOut_expected_prev[18] !== 1'bx ) && ( PcOut_prev[18] !== PcOut_expected_prev[18] )
		&& ((PcOut_expected_prev[18] !== last_PcOut_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PcOut_exp[18] = PcOut_expected_prev[18];
	end
	if (
		( PcOut_expected_prev[19] !== 1'bx ) && ( PcOut_prev[19] !== PcOut_expected_prev[19] )
		&& ((PcOut_expected_prev[19] !== last_PcOut_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PcOut_exp[19] = PcOut_expected_prev[19];
	end
	if (
		( PcOut_expected_prev[20] !== 1'bx ) && ( PcOut_prev[20] !== PcOut_expected_prev[20] )
		&& ((PcOut_expected_prev[20] !== last_PcOut_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PcOut_exp[20] = PcOut_expected_prev[20];
	end
	if (
		( PcOut_expected_prev[21] !== 1'bx ) && ( PcOut_prev[21] !== PcOut_expected_prev[21] )
		&& ((PcOut_expected_prev[21] !== last_PcOut_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PcOut_exp[21] = PcOut_expected_prev[21];
	end
	if (
		( PcOut_expected_prev[22] !== 1'bx ) && ( PcOut_prev[22] !== PcOut_expected_prev[22] )
		&& ((PcOut_expected_prev[22] !== last_PcOut_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PcOut_exp[22] = PcOut_expected_prev[22];
	end
	if (
		( PcOut_expected_prev[23] !== 1'bx ) && ( PcOut_prev[23] !== PcOut_expected_prev[23] )
		&& ((PcOut_expected_prev[23] !== last_PcOut_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PcOut_exp[23] = PcOut_expected_prev[23];
	end
	if (
		( PcOut_expected_prev[24] !== 1'bx ) && ( PcOut_prev[24] !== PcOut_expected_prev[24] )
		&& ((PcOut_expected_prev[24] !== last_PcOut_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PcOut_exp[24] = PcOut_expected_prev[24];
	end
	if (
		( PcOut_expected_prev[25] !== 1'bx ) && ( PcOut_prev[25] !== PcOut_expected_prev[25] )
		&& ((PcOut_expected_prev[25] !== last_PcOut_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PcOut_exp[25] = PcOut_expected_prev[25];
	end
	if (
		( PcOut_expected_prev[26] !== 1'bx ) && ( PcOut_prev[26] !== PcOut_expected_prev[26] )
		&& ((PcOut_expected_prev[26] !== last_PcOut_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PcOut_exp[26] = PcOut_expected_prev[26];
	end
	if (
		( PcOut_expected_prev[27] !== 1'bx ) && ( PcOut_prev[27] !== PcOut_expected_prev[27] )
		&& ((PcOut_expected_prev[27] !== last_PcOut_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PcOut_exp[27] = PcOut_expected_prev[27];
	end
	if (
		( PcOut_expected_prev[28] !== 1'bx ) && ( PcOut_prev[28] !== PcOut_expected_prev[28] )
		&& ((PcOut_expected_prev[28] !== last_PcOut_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PcOut_exp[28] = PcOut_expected_prev[28];
	end
	if (
		( PcOut_expected_prev[29] !== 1'bx ) && ( PcOut_prev[29] !== PcOut_expected_prev[29] )
		&& ((PcOut_expected_prev[29] !== last_PcOut_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PcOut_exp[29] = PcOut_expected_prev[29];
	end
	if (
		( PcOut_expected_prev[30] !== 1'bx ) && ( PcOut_prev[30] !== PcOut_expected_prev[30] )
		&& ((PcOut_expected_prev[30] !== last_PcOut_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PcOut_exp[30] = PcOut_expected_prev[30];
	end
	if (
		( PcOut_expected_prev[31] !== 1'bx ) && ( PcOut_prev[31] !== PcOut_expected_prev[31] )
		&& ((PcOut_expected_prev[31] !== last_PcOut_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PcOut[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PcOut_expected_prev);
		$display ("     Real value = %b", PcOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PcOut_exp[31] = PcOut_expected_prev[31];
	end
	if (
		( WriteData_expected_prev[0] !== 1'bx ) && ( WriteData_prev[0] !== WriteData_expected_prev[0] )
		&& ((WriteData_expected_prev[0] !== last_WriteData_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[0] = WriteData_expected_prev[0];
	end
	if (
		( WriteData_expected_prev[1] !== 1'bx ) && ( WriteData_prev[1] !== WriteData_expected_prev[1] )
		&& ((WriteData_expected_prev[1] !== last_WriteData_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[1] = WriteData_expected_prev[1];
	end
	if (
		( WriteData_expected_prev[2] !== 1'bx ) && ( WriteData_prev[2] !== WriteData_expected_prev[2] )
		&& ((WriteData_expected_prev[2] !== last_WriteData_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[2] = WriteData_expected_prev[2];
	end
	if (
		( WriteData_expected_prev[3] !== 1'bx ) && ( WriteData_prev[3] !== WriteData_expected_prev[3] )
		&& ((WriteData_expected_prev[3] !== last_WriteData_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[3] = WriteData_expected_prev[3];
	end
	if (
		( WriteData_expected_prev[4] !== 1'bx ) && ( WriteData_prev[4] !== WriteData_expected_prev[4] )
		&& ((WriteData_expected_prev[4] !== last_WriteData_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[4] = WriteData_expected_prev[4];
	end
	if (
		( WriteData_expected_prev[5] !== 1'bx ) && ( WriteData_prev[5] !== WriteData_expected_prev[5] )
		&& ((WriteData_expected_prev[5] !== last_WriteData_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[5] = WriteData_expected_prev[5];
	end
	if (
		( WriteData_expected_prev[6] !== 1'bx ) && ( WriteData_prev[6] !== WriteData_expected_prev[6] )
		&& ((WriteData_expected_prev[6] !== last_WriteData_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[6] = WriteData_expected_prev[6];
	end
	if (
		( WriteData_expected_prev[7] !== 1'bx ) && ( WriteData_prev[7] !== WriteData_expected_prev[7] )
		&& ((WriteData_expected_prev[7] !== last_WriteData_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[7] = WriteData_expected_prev[7];
	end
	if (
		( WriteData_expected_prev[8] !== 1'bx ) && ( WriteData_prev[8] !== WriteData_expected_prev[8] )
		&& ((WriteData_expected_prev[8] !== last_WriteData_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[8] = WriteData_expected_prev[8];
	end
	if (
		( WriteData_expected_prev[9] !== 1'bx ) && ( WriteData_prev[9] !== WriteData_expected_prev[9] )
		&& ((WriteData_expected_prev[9] !== last_WriteData_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[9] = WriteData_expected_prev[9];
	end
	if (
		( WriteData_expected_prev[10] !== 1'bx ) && ( WriteData_prev[10] !== WriteData_expected_prev[10] )
		&& ((WriteData_expected_prev[10] !== last_WriteData_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[10] = WriteData_expected_prev[10];
	end
	if (
		( WriteData_expected_prev[11] !== 1'bx ) && ( WriteData_prev[11] !== WriteData_expected_prev[11] )
		&& ((WriteData_expected_prev[11] !== last_WriteData_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[11] = WriteData_expected_prev[11];
	end
	if (
		( WriteData_expected_prev[12] !== 1'bx ) && ( WriteData_prev[12] !== WriteData_expected_prev[12] )
		&& ((WriteData_expected_prev[12] !== last_WriteData_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[12] = WriteData_expected_prev[12];
	end
	if (
		( WriteData_expected_prev[13] !== 1'bx ) && ( WriteData_prev[13] !== WriteData_expected_prev[13] )
		&& ((WriteData_expected_prev[13] !== last_WriteData_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[13] = WriteData_expected_prev[13];
	end
	if (
		( WriteData_expected_prev[14] !== 1'bx ) && ( WriteData_prev[14] !== WriteData_expected_prev[14] )
		&& ((WriteData_expected_prev[14] !== last_WriteData_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[14] = WriteData_expected_prev[14];
	end
	if (
		( WriteData_expected_prev[15] !== 1'bx ) && ( WriteData_prev[15] !== WriteData_expected_prev[15] )
		&& ((WriteData_expected_prev[15] !== last_WriteData_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[15] = WriteData_expected_prev[15];
	end
	if (
		( WriteData_expected_prev[16] !== 1'bx ) && ( WriteData_prev[16] !== WriteData_expected_prev[16] )
		&& ((WriteData_expected_prev[16] !== last_WriteData_exp[16]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[16] = WriteData_expected_prev[16];
	end
	if (
		( WriteData_expected_prev[17] !== 1'bx ) && ( WriteData_prev[17] !== WriteData_expected_prev[17] )
		&& ((WriteData_expected_prev[17] !== last_WriteData_exp[17]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[17] = WriteData_expected_prev[17];
	end
	if (
		( WriteData_expected_prev[18] !== 1'bx ) && ( WriteData_prev[18] !== WriteData_expected_prev[18] )
		&& ((WriteData_expected_prev[18] !== last_WriteData_exp[18]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[18] = WriteData_expected_prev[18];
	end
	if (
		( WriteData_expected_prev[19] !== 1'bx ) && ( WriteData_prev[19] !== WriteData_expected_prev[19] )
		&& ((WriteData_expected_prev[19] !== last_WriteData_exp[19]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[19] = WriteData_expected_prev[19];
	end
	if (
		( WriteData_expected_prev[20] !== 1'bx ) && ( WriteData_prev[20] !== WriteData_expected_prev[20] )
		&& ((WriteData_expected_prev[20] !== last_WriteData_exp[20]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[20] = WriteData_expected_prev[20];
	end
	if (
		( WriteData_expected_prev[21] !== 1'bx ) && ( WriteData_prev[21] !== WriteData_expected_prev[21] )
		&& ((WriteData_expected_prev[21] !== last_WriteData_exp[21]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[21] = WriteData_expected_prev[21];
	end
	if (
		( WriteData_expected_prev[22] !== 1'bx ) && ( WriteData_prev[22] !== WriteData_expected_prev[22] )
		&& ((WriteData_expected_prev[22] !== last_WriteData_exp[22]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[22] = WriteData_expected_prev[22];
	end
	if (
		( WriteData_expected_prev[23] !== 1'bx ) && ( WriteData_prev[23] !== WriteData_expected_prev[23] )
		&& ((WriteData_expected_prev[23] !== last_WriteData_exp[23]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[23] = WriteData_expected_prev[23];
	end
	if (
		( WriteData_expected_prev[24] !== 1'bx ) && ( WriteData_prev[24] !== WriteData_expected_prev[24] )
		&& ((WriteData_expected_prev[24] !== last_WriteData_exp[24]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[24] = WriteData_expected_prev[24];
	end
	if (
		( WriteData_expected_prev[25] !== 1'bx ) && ( WriteData_prev[25] !== WriteData_expected_prev[25] )
		&& ((WriteData_expected_prev[25] !== last_WriteData_exp[25]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[25] = WriteData_expected_prev[25];
	end
	if (
		( WriteData_expected_prev[26] !== 1'bx ) && ( WriteData_prev[26] !== WriteData_expected_prev[26] )
		&& ((WriteData_expected_prev[26] !== last_WriteData_exp[26]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[26] = WriteData_expected_prev[26];
	end
	if (
		( WriteData_expected_prev[27] !== 1'bx ) && ( WriteData_prev[27] !== WriteData_expected_prev[27] )
		&& ((WriteData_expected_prev[27] !== last_WriteData_exp[27]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[27] = WriteData_expected_prev[27];
	end
	if (
		( WriteData_expected_prev[28] !== 1'bx ) && ( WriteData_prev[28] !== WriteData_expected_prev[28] )
		&& ((WriteData_expected_prev[28] !== last_WriteData_exp[28]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[28] = WriteData_expected_prev[28];
	end
	if (
		( WriteData_expected_prev[29] !== 1'bx ) && ( WriteData_prev[29] !== WriteData_expected_prev[29] )
		&& ((WriteData_expected_prev[29] !== last_WriteData_exp[29]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[29] = WriteData_expected_prev[29];
	end
	if (
		( WriteData_expected_prev[30] !== 1'bx ) && ( WriteData_prev[30] !== WriteData_expected_prev[30] )
		&& ((WriteData_expected_prev[30] !== last_WriteData_exp[30]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[30] = WriteData_expected_prev[30];
	end
	if (
		( WriteData_expected_prev[31] !== 1'bx ) && ( WriteData_prev[31] !== WriteData_expected_prev[31] )
		&& ((WriteData_expected_prev[31] !== last_WriteData_exp[31]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port WriteData[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", WriteData_expected_prev);
		$display ("     Real value = %b", WriteData_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_WriteData_exp[31] = WriteData_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module top_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset;
// wires                                               
wire [31:0] DataAdr;
wire [31:0] InstrOut;
wire MemWrite;
wire [31:0] PcOut;
wire [31:0] WriteData;

wire sampler;                             

// assign statements (if any)                          
top i1 (
// port map - connection between master ports and signals/registers   
	.DataAdr(DataAdr),
	.InstrOut(InstrOut),
	.MemWrite(MemWrite),
	.PcOut(PcOut),
	.WriteData(WriteData),
	.clk(clk),
	.reset(reset)
);

// reset
initial
begin
	reset = 1'b1;
	reset = #30000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #25000 1'b1;
	#25000;
end 

top_vlg_sample_tst tb_sample (
	.clk(clk),
	.reset(reset),
	.sampler_tx(sampler)
);

top_vlg_check_tst tb_out(
	.DataAdr(DataAdr),
	.InstrOut(InstrOut),
	.MemWrite(MemWrite),
	.PcOut(PcOut),
	.WriteData(WriteData),
	.sampler_rx(sampler)
);
endmodule

